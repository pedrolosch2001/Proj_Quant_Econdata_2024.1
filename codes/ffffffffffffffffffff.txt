options(scipen = 999)
# Pacotes ------------------------------------------------------

# Pacotes para manipulacao 
library(tidyverse)
library(scales)
library(tidyquant)
library(lubridate)
library(writexl)

# Pacotes para modelagem
library(PerformanceAnalytics)
library(xts)
library(forecast)

# Pacotes para dados
library(rbcb)
library(rb3)
library(ggthemes)
library(rvest) # webscraping
library(zoo)

# Baixando os dados ---------------------------------------------

## Acoes --------------------------------------------------------

# Partes do codigo estarao como comentados pois salvei os dfs em arquivos .rds para facilitar e nao precisar 
# realizar o processo todo do 0.
# arquivos .rds estarao todos salvos na pasta dados

# nomes_ativos <- "https://br.tradingview.com/markets/stocks-brazil/market-movers-large-cap/" %>% 
#   read_html() %>%   
#   html_elements(".tickerName-GrtoTeat") %>% 
#   html_text() %>%
#   str_c(".SA")
# 
# ativos = tq_get(x = nomes_ativos,
#                 from = '2013-01-01',
#                 to = '2023-12-31')
# 
# ibov = tq_get(x = '^BVSP',
#               from = '2013-01-01',
#               to = '2023-12-31')
# 
# ativos_filtrado = ativos %>% 
#   dplyr::mutate(month = month(date),
#                 year = year(date),
#                 day = day(date)) %>% 
#   dplyr::group_by(symbol) %>% 
#   dplyr::filter(all(year >= 2013)) %>%
#   dplyr::ungroup() %>% 
#   dplyr::select(-c(month, year, day)) %>% 
#   dplyr::mutate(date = make_date(year(date),
#                                  month(date),
#                                  day(date))) %>% 
#   dplyr::arrange(date) %>% 
#   dplyr::rename(acao = adjusted, ticker = symbol) %>% 
#   dplyr::select(ticker, date, acao)
# 
# ativos_modelagem = ativos_filtrado %>% 
#   tidyr::pivot_wider(names_from = ticker,
#                      values_from = acao)
# 
# 
# ibov_filtrado = ibov %>% dplyr::mutate(month = month(date),
#                        year = year(date),
#                        day = day(date)) %>% 
#   dplyr::group_by(symbol) %>% 
#   dplyr::filter(all(year >= 2013)) %>%
#   dplyr::ungroup() %>% 
#   dplyr::select(-c(month, year, day)) %>% 
#   dplyr::mutate(date = make_date(year(date),
#                                  month(date),
#                                  day(date))) %>% 
#   dplyr::arrange(date) %>% 
#   dplyr::rename(acao = adjusted, ticker = symbol) %>% 
#   dplyr::select(ticker, date, acao) %>% print()
# 
# ibov_pivot_wider = ibov_filtrado %>% 
#   tidyr::pivot_wider(names_from = ticker,
#                      values_from = acao)

# Salvando os dataframes trabalhados

# write_rds(ativos_filtrado, file.path(getwd(), 'data', 'ativos_filtrado.rds'))
# 
# write_rds(ativos_modelagem, file.path(getwd(), 'data', 'ativos_modelagem.rds'))
# 
# write_rds(ibov_filtrado, file.path(getwd(), 'data', 'ibov_filtrado.rds'))
# 
# write_rds(ibov_pivot_wider, file.path(getwd(), 'data', 'ibov_pivot_wider.rds'))

# Inicio da modelagem -----------------------------------------------------------------------
  
# A partir daqui estaremos usando os dataframes tratados para realizar a aplicacao 
# da estrategia.

ativos_filtrado = read_rds('data/ativos_filtrado.rds') %>% print()

ativos_modelagem = read_rds('data/ativos_modelagem.rds') %>% print()
  
ibov_filtrado = read_rds('data/ibov_filtrado.rds') %>% print()

ibov_pivot_wider = read_rds('data/ibov_pivot_wider.rds') %>% print()

View(ativos_filtrado)
View(ativos_filtrado)
View(ibov_filtrado)
View(ibov_pivot_wider)

unique(ativos_filtrado$ticker) # para ver os nomes dos ativos



petr3 = ativos_filtrado %>% 
  dplyr::filter(ticker == 'PETR3.SA') %>% 
  print()

df = petr3_teste %>% 
  dplyr::mutate(SMA7 = TTR::SMA(acao, n = 7),
                SMA15 = TTR::SMA(acao, n = 15)) %>% 
  na.omit() %>% 
  mutate(posicao = case_when(lag(SMA7) > lag(SMA15) ~ 1,
                             lag(SMA7) < lag(SMA15) ~ -1,
                             lag(SMA7) == lag(SMA15) ~ 0))



ativos_lista = ativos_filtrado %>% 
  split(f = .$ticker) %>% 
  keep(function(x){
    x$date %>% head(1) == "2013-01-02"
  }) 

ativos_lista = ativos_lista %>% 
  map(function(x){
    x %>% 
      mutate(SMA7 = TTR::SMA(acao, n = 7),
             SMA15 = TTR::SMA(acao, n = 15)) %>% 
      na.omit() %>% 
      mutate(posicao = case_when(lag(SMA7) > lag(SMA15) ~ 1,
                                 lag(SMA7) < lag(SMA15) ~ -1,
                                 lag(SMA7) == lag(SMA15) ~ 0), 
             retorno = case_when(posicao == 1 ~ acao/lag(acao) - 1,
                                 posicao == 0 ~ NA,
                                 posicao == -1 ~ lag(acao)/acao - 1)) %>% 
      na.omit()
  })

carteira<-ativos_lista %>% 
  bind_rows() %>% 
  select(ticker, date, retorno) %>% 
  pivot_wider(names_from = "ticker", values_from = "retorno") %>% 
  mutate(portfolio=rowMeans(.[-1],na.rm=T))

prod(carteira$portfolio+1)-1




funcmax<-function(n1,n2){
  
  ativos_lista = ativos_lista %>% 
    map(function(x){
      x %>% 
        mutate(SMA7 = TTR::SMA(acao, n = n1),
               SMA15 = TTR::SMA(acao, n = n2)) %>% 
        na.omit() %>% 
        mutate(posicao = case_when(lag(SMA7) > lag(SMA15) ~ 1,
                                   lag(SMA7) < lag(SMA15) ~ -1,
                                   lag(SMA7) == lag(SMA15) ~ 0), 
               retorno = case_when(posicao == 1 ~ acao/lag(acao) - 1,
                                   posicao == 0 ~ NA,
                                   posicao == -1 ~ lag(acao)/acao - 1)) %>% 
        na.omit()
    })
  
  carteira<-ativos_lista %>% 
    bind_rows() %>% 
    select(ticker, date, retorno) %>% 
    pivot_wider(names_from = "ticker", values_from = "retorno") %>% 
    mutate(portfolio=rowMeans(.[-1],na.rm=T))
  
  prod(carteira$portfolio+1)-1
  
}
funcmax(20,35)

mengao<-data.frame(sma_menor=sample(10:100,size=10^6,replace=T),
           sma_maior=sample(10:100,size=10^6,replace=T)) %>%
  filter(sma_menor<sma_maior) %>% 
  unique()


df_plot_teste = carteira %>% 
  select(date, portfolio) %>% 
  mutate(retorno_acumulado = cumsum(portfolio))

df_plot_teste %>% 
  left_join(df_plot_teste, ibov_pivot_wider, by = "date")

write_xlsx(df_plot_teste, "df_plot_teste.xlsx")

ggplot() + geom_line(data = df_plot_teste, x = date, y = retorno_acumulado)  

